
package print;

/**
 * <pre>
 * Course:          CS 142 Java II
 * Class:           Random.java
 * File:            Random.java
 * Description:     This class is a sub type of java.util.Random.  Has custom
 * methods created for use in this simulation with functions like 
 * nextGaussian, and nextExponential.  Overrides java nextGaussian().
 * 
 * Created:         June 1, 2013
 * Hours:           1
 * Platform:        jdk 1.7.0_17; NetBeans IDE 7.3; Windows 7
 * Environment:     PC, Windows Vista Business, jdk 7.0, NetBeans 7.0.1
 * @author:         Chris Steigerwald
 * @author:         Tyler Kowalczik
 * @version         1.0
 * @see java.util.ArrayList
 * @see java.util.concurrent.locks.*
 * </pre>
 */
public class Random extends java.util.Random
{
    private double mean;
    private double standardDeviation;
    
    /**
     * <pre>
     * Constructor: Random
     * Description: Constructor that assigns the value of mean and standardDeviation. This one
     * parameter constructor automatically sets the standardDeviation to
     * half the value of the mean.
     * @param mean The value of the mean
     * @author Tyler Kowalczik
     * @author Chris Steigerwald
     * @date 6/1/2013
     * </pre>
     */
    public Random(double mean)
    {
        this.mean = mean;
        //I had to change std deviation to 1/2*mean so 96% of the time the
        //values generated by nextGaussian will be within an appropriate range
        this.standardDeviation = 0.5 * mean;
    }
    
    /**
     * <pre>
     * Constructor: Random
     * Description: This overloaded constructor allows the caller to explicitly 
     * set both the mean and the standardDeviation upon construction. 
     * @param mean The value of the mean
     * @param standardDeviation The value of the standardDeviation
     * @author Tyler Kowalczik
     * @author Chris Steigerwald
     * @date 6/1/2013
     * </pre>
     */
    public Random(double mean, double standardDeviation)
    {
         this.mean = mean;
         this.standardDeviation = standardDeviation;
    }
    
    /**
     * <pre>
     * Method:      scaledNextGaussian
     * Description: This method ensures that a random number that follows a 
     * Gaussian distribution is generated within the range of 1 -->  
     * mean * 2 (96% of the time). This should be used in place of 
     * intNextExponential() for job sizes to prevent unreasonably large job sizes.
     * precondition:    none
     * postcondition:   return a double Gaussian value
     * @param none
     * @return a double random number that is normally distributed with the
     * given mean and standard deviation.
     * @author Tyler Kowalczik
     * @author Chris Steigerwald
     * @date 6/1/2013
     * </pre>
     */
    public double scaledNextGaussian()
    {
        double x = super.nextGaussian();  
        x = x * standardDeviation + mean;
        
        if (x < 1)
        {
            x = 1;
            return x;
        }
        
        return x;
    }
    
    /**
     * <pre>
     * Method:      nextGaussian
     * Description: Overridden method that returns a scaled random number that 
     * follows a Gaussian distribution. This method invokes the super class' 
     * nextGaussian method. 
     * precondition:    none
     * postcondition:   overrides java method and returns a double Gaussian value
     * @param none
     * @return double Scaled random number that follows a Gaussian distribution
     * @author Tyler Kowalczik
     * @author Chris Steigerwald
     * @date 6/1/2013
     * </pre>
     */
    @Override
    public double nextGaussian() 
    {
        double x = super.nextGaussian(); 
        return x*standardDeviation + mean;
    }   
    
    /**
     * <pre>
     * Method:      nextExponential
     * Description: This method returns an exponentially distributed number that 
     * is scaled by the current value of mean.
     * precondition:    none
     * postcondition:   return double nextExponential function
     * @param none
     * @return double a double random number that is exponentially distributed with
     * the given mean
     * @author Tyler Kowalczik
     * @author Chris Steigerwald
     * @date 6/1/2013
     * </pre>
     */
    public double nextExponential()
    {
        return -mean*Math.log(1.0 - nextDouble());
    }
    
    /**
     * <pre>
     * Method:      intNextExponential
     * Description: This method calls the nextExponential method, but converts 
     * the returned value to an int which is then returned to the caller.
     * precondition:    none
     * postcondition:   returns int nextExponential function
     * @param none
     * @return int
     * @author Tyler Kowalczik
     * @author Chris Steigerwald
     * @date 6/1/2013
     * </pre>
     */
    public int intNextExponential()
    {
        return (int) Math.ceil(nextExponential());
    }
    
    /**
     * <pre>
     * Method:      setMean
     * Description: This method is used to set the mean value of the random 
     * number generator. This method should only be used by classes that allow 
     * for the alteration of mean values.
     * precondition:    none
     * postcondition:   return mean to caller
     * @param mean New value for the mean
     * @return void
     * @author Tyler Kowalczik
     * @author Chris Steigerwald
     * @date 6/1/2013
     * </pre>
     */
    public void setMean(int mean)
    {
        this.mean = mean;
    }
}
